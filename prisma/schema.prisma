generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  phone               String               @unique @db.VarChar(20)
  isActive            Boolean              @default(true)
  deactivationDate    DateTime?
  activationLinkId    String?
  password            String
  failedAttempts      Int                  @default(0)
  isVerifiedEmail     Boolean              @default(false)
  isVerifiedPhone     Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  passwordResetTokens PasswordResetToken[]
  token               Token?
  userRoles           UserRole[]
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleType   @unique @default(Customer)
  users UserRole[] @relation("RoleToUserRoles")
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId Int
  role   Role   @relation("RoleToUserRoles", fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model Token {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String?  @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

enum RoleType {
  Customer
  Seller
}
